

browser -> server:
    spec: new samples,
    name of original regulus file
    version number

server:
    call external code (run)
    report back when done
    future:
        ability to cancel a running resampling process
        check status

run:
    load regulus file
    create next version (remove msc, maybe mark it as in progress)

    for each sample:  (one at a time or in parallel)
        generate scenario file (external code)
        run simulation (external code)
        any required regular post processing

        compute measures (measures are external)

        add point (dims and measures) to regulus file

    create msc for each measure and add it to the regulus file



Notes:
 1. Generating scenarios is not well defined. Right now we have one example (sim).
    We should allow for other scenario generators so the run code should call an external code to do the generation.
    That way we can use others without modifying 'run'. For now 'run' should use the one we have.

 2. Running the simulation:
    This should also use an external code rather than call cyclus as I did in sim.py because we will need to change it
    also be able to submit the run to the cluster. For now, this external code should just execute the local cyclus.

 3. I've use Cyan to do the post processing. It doesn't work on my laptop though and it's not being maintained. We need
    a new script that will do minimal post processing. For now cyan is fine.

 4. Measures:
    For sim.py I put the measure in one file measures.py, which also include a Measure class to run all of them.
    It good for now but we need a more general process

 5. create msc:
    Modify post.py to work with a regulus file where it can find the list of measures and dims.
    Also, it should compute all the MSCs.

 6. We need a utility to create an initial regulus file.
    The code will create a regulus file and generate new sample points which can than be given to run.py



